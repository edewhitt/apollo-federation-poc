schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Appointment
  @join__type(graph: APPOINTMENTS, key: "id")
{
  id: ID!
  appointmentDate: String!
  patient: User!
  provider: User!
}

scalar join__FieldSet

enum join__Graph {
  APPOINTMENTS @join__graph(name: "appointments", url: "http://localhost:2121/graphql")
  PROVIDERS @join__graph(name: "providers", url: "http://localhost:2122/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:2123/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: APPOINTMENTS)
  @join__type(graph: PROVIDERS)
  @join__type(graph: USERS)
{
  appointment(id: ID!): Appointment @join__field(graph: APPOINTMENTS)
  appointments: [Appointment] @join__field(graph: APPOINTMENTS)
  provider(id: ID!): User @join__field(graph: PROVIDERS)
  providers: [User] @join__field(graph: PROVIDERS)
  users: [User] @join__field(graph: USERS)
  user(id: ID!): User @join__field(graph: USERS)
}

type User
  @join__type(graph: APPOINTMENTS, key: "id", extension: true)
  @join__type(graph: PROVIDERS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id")
{
  id: ID!
  practice: String @join__field(graph: PROVIDERS)
  name: String @join__field(graph: USERS)
}
